

plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}


repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	// I'll be honest, im stealing this from litematica
	maven { url = 'https://masa.dy.fi/maven' }
	maven { url = 'https://maven.fallenbreath.me/releases' }
	maven { url = 'https://maven.terraformersmc.com/releases/' }
	maven { url = 'https://jitpack.io' }

	// Allows more deep mod integration
	flatDir {
		dirs 'libs'
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"


	modImplementation "com.github.sakura-ryoko:malilib:${project.malilib_version}"

	// Optional mods
	modCompileOnly "baritone-api-fabric:baritone-api-fabric:${project.baritone_version}"

	// Mesa mod family integrations
	modCompileOnly "minihud-fabric:minihud-fabric:${project.minihud_version}"
	modCompileOnly "tweakeroo-fabric:tweakeroo-fabric:${project.tweakeroo_version}"
	modCompileOnly "litematica-fabric:litematica-fabric:${project.litematica_version}"
	modCompileOnly "itemscroller-fabric:itemscroller-fabric:${project.itemscroller_version}"

	implementation 'org.reflections:reflections:0.10.2'

}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}

}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

loom {
	accessWidenerPath = file("src/main/resources/puppeteer.accesswidener")
}


import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

def generatedDir = "$buildDir/generated/sources/constants"

task generateBuildConstants {
    doLast {
        def gitHash = 'git rev-parse HEAD'.execute().text.trim()
        def licenseFile = file('LICENSE')
        def licenseContent = licenseFile.text
            .replace("\\", "\\\\")
            .replace("\"", "\\\"")
            .replace("\r", "")
            .replace("\n", "\\n")

		def buildDate = ZonedDateTime.now().format(
            DateTimeFormatter.ISO_OFFSET_DATE_TIME
        )
        def packageName = 'me.psychedelicpalimpsest.constants' // Change as needed
        def className = 'BuildConstants'

        def outputDir = file("$generatedDir/${packageName.replace('.', '/')}")
        outputDir.mkdirs()

        def javaFile = new File(outputDir, "${className}.java")
        javaFile.text = """
            package ${packageName};

            public class ${className} {
                public static final String GIT_HASH = "${gitHash}";
                public static final String LICENSE = "${licenseContent}";
				
				public static final String BUILD_DATE = "${buildDate}";
            }
        """.stripIndent()
    }
}

sourceSets.main.java.srcDir generatedDir
compileJava.dependsOn generateBuildConstants
